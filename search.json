[
  {
    "objectID": "posts/MESA/index.html",
    "href": "posts/MESA/index.html",
    "title": "Workshop on graphics",
    "section": "",
    "text": "Graphics: the good, the bad, and the ugly\nToday’s slides"
  },
  {
    "objectID": "posts/MESA/index.html#resources",
    "href": "posts/MESA/index.html#resources",
    "title": "Workshop on graphics",
    "section": "Resources",
    "text": "Resources\nNotebook with different Python libraries\nplotting.ipynb\n\nFull dataset of core-satellite absorption spectra\n - params.dat - results.dat - results_small.dat - results_terms.dat\n\n\nToy exercise with solar cell data\n\nDescription of exercise\ndata1.csv\ndata2.txt\ndata3.csv\nOriginal dataset (not needed)\n\n\n\nDemo from the start (R)\n\ndemo_mini.R\ncleanup.R"
  },
  {
    "objectID": "posts/MESA/material/demo.html",
    "href": "posts/MESA/material/demo.html",
    "title": "Demo: exploring a complex dataset",
    "section": "",
    "text": "library(ggplot2)\nlibrary(tidyr)\nlibrary(egg)\nsuppressPackageStartupMessages(library(dplyr))\n# library(here)\n# setwd(here(\"2023_MESA\",\"demo\"))\nsetwd(\"~/Documents/github/presentations/2023_MESA/demo\")\n\nmap &lt;- aes\nplot &lt;- ggplot\nlayer_line &lt;- geom_line\nlayer_point &lt;- geom_point\nsave_plot &lt;- ggsave\n\noptions(repr.plot.width = 18, repr.plot.height = 12)\n# options(jupyter.plot_mimetypes = \"image/svg+xml\")\noptions(jupyter.plot_mimetypes = \"image/png\")\ntheme_set(theme_grey(24))\n\nLe chargement a n'ecessit'e le package : gridExtra\nd = read.table(\"results.dat\", header = TRUE)\nhead(d)\n# glimpse(d)\n\n\nA data.frame: 6 x 8\n\n\n\nNsat\nRcore\nRsat\ngap\nsatellite\nwavelength\ntotal_absorption\nsat_absorption\n\n\n\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n1\n20\n2\n1\nAg\n350\n2038.992\n1.250810\n\n\n2\n1\n20\n2\n1\nAg\n352\n2034.538\n1.376851\n\n\n3\n1\n20\n2\n1\nAg\n354\n2030.244\n1.521263\n\n\n4\n1\n20\n2\n1\nAg\n356\n2026.057\n1.687591\n\n\n5\n1\n20\n2\n1\nAg\n358\n2021.924\n1.880255\n\n\n6\n1\n20\n2\n1\nAg\n360\n2017.796\n2.104805\n\n\n\n\n\n\nA data.frame: 18 x 3\n\n\n\nRsat\nRcore\ngap\n\n\n\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n\n\n\n\n1\n2.0\n20\n1\n\n\n1006\n2.0\n30\n1\n\n\n2011\n2.0\n40\n1\n\n\n3016\n2.5\n20\n1\n\n\n4021\n2.5\n30\n1\n\n\n5026\n2.5\n40\n1\n\n\n6031\n3.0\n20\n1\n\n\n7036\n3.0\n30\n1\n\n\n8041\n3.0\n40\n1\n\n\n9046\n2.0\n20\n2\n\n\n10051\n2.0\n30\n2\n\n\n11056\n2.0\n40\n2\n\n\n12061\n2.5\n20\n2\n\n\n13066\n2.5\n30\n2\n\n\n14071\n2.5\n40\n2\n\n\n15076\n3.0\n20\n2\n\n\n16081\n3.0\n30\n2\n\n\n17086\n3.0\n40\n2\nparams = read.table(\"params.dat\", header = TRUE)\nparams\n\n\nA data.frame: 180 x 14\n\n\nNsat\nRcore\nRsat\ngap\nsatellite\nepsCore\nmedium\nN.mie\nN.esa\nN.nmax\nN.inc\ncoupling\nself.reaction\nid\n\n\n&lt;int&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n\n\n\n\n1\n20\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n1\n\n\n50\n20\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n2\n\n\n100\n20\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n3\n\n\n150\n20\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n4\n\n\n200\n20\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n5\n\n\n1\n30\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n6\n\n\n50\n30\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n7\n\n\n100\n30\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n8\n\n\n150\n30\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n9\n\n\n200\n30\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n10\n\n\n1\n40\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n11\n\n\n50\n40\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n12\n\n\n100\n40\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n13\n\n\n150\n40\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n14\n\n\n200\n40\n2.0\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n15\n\n\n1\n20\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n16\n\n\n50\n20\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n17\n\n\n100\n20\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n18\n\n\n150\n20\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n19\n\n\n200\n20\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n20\n\n\n1\n30\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n21\n\n\n50\n30\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n22\n\n\n100\n30\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n23\n\n\n150\n30\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n24\n\n\n200\n30\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n25\n\n\n1\n40\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n26\n\n\n50\n40\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n27\n\n\n100\n40\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n28\n\n\n150\n40\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n29\n\n\n200\n40\n2.5\n1\nAg\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n30\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1\n20\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n151\n\n\n50\n20\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n152\n\n\n100\n20\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n153\n\n\n150\n20\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n154\n\n\n200\n20\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n155\n\n\n1\n30\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n156\n\n\n50\n30\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n157\n\n\n100\n30\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n158\n\n\n150\n30\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n159\n\n\n200\n30\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n160\n\n\n1\n40\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n161\n\n\n50\n40\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n162\n\n\n100\n40\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n163\n\n\n150\n40\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n164\n\n\n200\n40\n2.5\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n165\n\n\n1\n20\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n166\n\n\n50\n20\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n167\n\n\n100\n20\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n168\n\n\n150\n20\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n169\n\n\n200\n20\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n170\n\n\n1\n30\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n171\n\n\n50\n30\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n172\n\n\n100\n30\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n173\n\n\n150\n30\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n174\n\n\n200\n30\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n175\n\n\n1\n40\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n176\n\n\n50\n40\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n177\n\n\n100\n40\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n178\n\n\n150\n40\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n179\n\n\n200\n40\n3.0\n2\nPd\nepsAu\n1.33\n50\n100\n10\n36\n1\n1\n180\nWe’ll start with a smaller dataset,\ndsmall = read.table(\"results_small.dat\", header = TRUE)\nhead(dsmall)\n# glimpse(dsmall)\n\n\nA data.frame: 6 x 8\n\n\n\nNsat\nRcore\nRsat\ngap\nsatellite\nwavelength\ntotal_absorption\nsat_absorption\n\n\n\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;chr&gt;\n&lt;int&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\n1\n30\n2\n1\nAg\n350\n5907.557\n1.231910\n\n\n2\n1\n30\n2\n1\nAg\n352\n5913.806\n1.359553\n\n\n3\n1\n30\n2\n1\nAg\n354\n5920.307\n1.505909\n\n\n4\n1\n30\n2\n1\nAg\n356\n5926.971\n1.674597\n\n\n5\n1\n30\n2\n1\nAg\n358\n5933.706\n1.870120\n\n\n6\n1\n30\n2\n1\nAg\n360\n5940.414\n2.098127\nplot(data = dsmall, mapping = map(x = wavelength, y = sat_absorption)) +\n    layer_line()\noptions(repr.plot.width=24, repr.plot.height=12)\nplot(data = dsmall, mapping = map(x = wavelength, y = sat_absorption, \n                                    linetype=factor(gap), colour=factor(Nsat))) +\n  facet_wrap(~satellite) +\n  layer_line()"
  },
  {
    "objectID": "posts/MESA/material/demo.html#polishing",
    "href": "posts/MESA/material/demo.html#polishing",
    "title": "Demo: exploring a complex dataset",
    "section": "polishing",
    "text": "polishing\n\n\n\np = plot(data = dsmall, mapping = map(x = wavelength, y = sat_absorption, \n                                    linetype=factor(gap), colour=factor(Nsat))) +\n  facet_wrap(~satellite) +\n  layer_line()\n\np + facet_grid(Nsat~satellite, scales='free') +\n  geom_vline(xintercept=390, lty=2) +\n  theme_article(base_size=24) +\n  labs(x = \"wavelength /nm\", y=expression(\"satellite absorption \"*sigma[abs]/nm^2), \n       linetype=\"gap /nm\", colour = expression(N[sat]))"
  },
  {
    "objectID": "posts/MESA/material/demo.html#full-dataset",
    "href": "posts/MESA/material/demo.html#full-dataset",
    "title": "Demo: exploring a complex dataset",
    "section": "full dataset",
    "text": "full dataset\n\n\n\n\n\nplot(data = d, mapping = map(x = wavelength, y = sat_absorption, \n                                        linetype=factor(gap), colour=factor(Nsat))) +\n  layer_line() +\n  facet_grid(Rsat~satellite+Rcore, scales='free', labeller = label_both) +\n  theme_article(base_size=18) +\n  labs(x = \"wavelength /nm\", y=expression(\"satellite absorption \"*sigma[abs]/nm^2), \n       linetype=\"gap /nm\", colour = expression(N[sat])) \n\n\nd2 = d |&gt; filter(satellite == \"Ag\")\np &lt;- plot(data = d2, mapping = map(x = wavelength, y = sat_absorption/Nsat, \n                               linetype=factor(gap), colour=factor(Nsat))) +\n  layer_line() +\n  facet_grid(Rsat~Rcore, scales='free', \n             labeller = label_bquote(rows=R[sat]==.(Rsat)*nm, cols=R[core]==.(Rcore)*nm)) +\n  theme_article(base_size=18) +\n  labs(x = \"wavelength /nm\", y=expression(sigma[abs]/nm^2), \n       linetype=\"gap /nm\", colour = expression(N[sat])) \n\n\nlast_plot() +\n  scale_x_continuous(lim=c(350,500))\n\n\n## other layers\n\nd3 &lt;-  read.table(\"results_terms.dat\", header = TRUE) |&gt; filter(satellite == \"Ag\")\n\np + layer_point(data=d3, aes(shape='Reference')) +\n  scale_x_continuous(lim=c(350,500)) +\n  labs(shape=\"\") \n\nplot(data = d2, mapping = map(x = wavelength, y = sat_absorption/Nsat, \n                                linetype=factor(gap), colour=factor(Nsat))) +\n  layer_line() +\n  layer_point(data=d3, aes(shape='Reference')) +\n  facet_grid(Rsat~Rcore, scales='free', \n             labeller = label_bquote(rows=R[sat]==.(Rsat)*nm, cols=R[core]==.(Rcore)*nm)) +\n  scale_x_continuous(lim=c(350,460), expand=c(0,0)) +\n  labs(x = \"wavelength /nm\", y=expression(sigma[abs]/nm^2), \n       linetype=\"gap /nm\", colour = expression(N[sat]), shape=\"\")  \n\nsave_plot(filename = \"overview.pdf\", plot = p + theme_presentation(base_size = 14, base_family = \"Gill Sans Nova\"),\nwidth=9, height=6, device = cairo_pdf)\n\n\n\nWarning message:\n\"Removed 1250 rows containing missing values (`geom_line()`).\"\n\n\n\n\n\nWarning message:\n\"Removed 1250 rows containing missing values (`geom_line()`).\"\nWarning message:\n\"Removed 30 rows containing missing values (`geom_point()`).\"\n\n\n\n\n\nWarning message:\n\"Removed 1450 rows containing missing values (`geom_line()`).\"\nWarning message:\n\"Removed 38 rows containing missing values (`geom_point()`).\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)):\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"famille de police 'Gill Sans Nova' introuvable dans la base de donn'ees de polices PostScript\"\nWarning message in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, :\n\"la police CMap pour la famille 'Gill Sans Nova' introuvable dans la base de donn'ees des polices\"\nERROR while rich displaying an object: Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : impossible de trouver ou de charger la police PDF CID\n\nTraceback:\n1. tryCatch(withCallingHandlers({\n .     if (!mime %in% names(repr::mime2repr)) \n .         stop(\"No repr_* for mimetype \", mime, \" in repr::mime2repr\")\n .     rpr &lt;- repr::mime2repr[[mime]](obj)\n .     if (is.null(rpr)) \n .         return(NULL)\n .     prepare_content(is.raw(rpr), rpr)\n . }, error = error_handler), error = outer_handler)\n2. tryCatchList(expr, classes, parentenv, handlers)\n3. tryCatchOne(expr, names, parentenv, handlers[[1L]])\n4. doTryCatch(return(expr), name, parentenv, handler)\n5. withCallingHandlers({\n .     if (!mime %in% names(repr::mime2repr)) \n .         stop(\"No repr_* for mimetype \", mime, \" in repr::mime2repr\")\n .     rpr &lt;- repr::mime2repr[[mime]](obj)\n .     if (is.null(rpr)) \n .         return(NULL)\n .     prepare_content(is.raw(rpr), rpr)\n . }, error = error_handler)\n6. repr::mime2repr[[mime]](obj)\n7. repr_text.default(obj)\n8. paste(capture.output(print(obj)), collapse = \"\\n\")\n9. capture.output(print(obj))\n10. withVisible(...elt(i))\n11. print(obj)\n12. print.ggplot(obj)\n13. ggplot_gtable(data)\n14. ggplot_gtable.ggplot_built(data)\n15. layout$render(geom_grobs, data, theme, plot$labels)\n16. render(..., self = self)\n17. self$facet$draw_panels(panels, self$layout, self$panel_scales_x, \n  .     self$panel_scales_y, self$panel_params, self$coord, data, \n  .     theme, self$facet_params)\n18. draw_panels(...)\n19. render_strips(col_vars, row_vars, params$labeller, theme)\n20. build_strip(x, labeller, theme, TRUE)\n21. assemble_strips(matrix(grobs_top, ncol = ncol, nrow = nrow), \n  .     theme, horizontal, clip = clip)\n22. max_height(lapply(grobs, function(x) x$heights[2]))\n23. unlist(lapply(grobs, height_cm))\n24. lapply(grobs, height_cm)\n25. FUN(X[[i]], ...)\n26. convertHeight(x, \"cm\", TRUE)\n27. convertUnit(x, unitTo, \"y\", \"dimension\", \"y\", \"dimension\", valueOnly = valueOnly)\n28. grid.Call(C_convert, x, as.integer(whatfrom), as.integer(whatto), \n  .     valid.units(unitTo))\n29. (function (x) \n  . {\n  .     heightDetails(x)\n  . })(structure(list(label = R[core] == 20L * nm, x = structure(0.5, unit = 0L, class = c(\"simpleUnit\", \n  . \"unit\", \"unit_v2\")), y = structure(0.5, unit = 0L, class = c(\"simpleUnit\", \n  . \"unit\", \"unit_v2\")), just = \"centre\", hjust = 0.5, vjust = 0.5, \n  .     rot = 0, check.overlap = FALSE, name = \"GRID.text.3088\", \n  .     gp = structure(list(fontsize = 11.2, col = \"grey10\", fontfamily = \"Gill Sans Nova\", \n  .         lineheight = 0.9, font = c(plain = 1L)), class = \"gpar\"), \n  .     vp = NULL), class = c(\"text\", \"grob\", \"gDesc\")))\n30. heightDetails(x)\n31. heightDetails.text(x)\n32. grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, \n  .     resolveHJust(x$just, x$hjust), resolveVJust(x$just, x$vjust), \n  .     x$rot, 0)\nWarning message:\n\"Removed 1450 rows containing missing values (`geom_line()`).\"\nWarning message:\n\"Removed 38 rows containing missing values (`geom_point()`).\""
  },
  {
    "objectID": "posts/MESA/material/plotting.html",
    "href": "posts/MESA/material/plotting.html",
    "title": "Tutorial example: plotting with Python",
    "section": "",
    "text": "We’ll load the palmerpenguins dataset, and produce a simple scatter plot using different plotting packages for comparison. Each of these plots can be adjusted in many ways, and you should explore the documentation of those packages to get an idea of the possibilities (and the specific syntax to use).\n# pip install palmerpenguins \n# conda activate condapython\n# conda install -c conda-forge r-palmerpenguins\nimport palmerpenguins\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\nLet’s check that things work by looking at the first few rows of the dataset\nfrom palmerpenguins import load_penguins\npenguins = load_penguins()\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007"
  },
  {
    "objectID": "posts/MESA/material/plotting.html#plotting-with-matplotlib",
    "href": "posts/MESA/material/plotting.html#plotting-with-matplotlib",
    "title": "Tutorial example: plotting with Python",
    "section": "Plotting with matplotlib",
    "text": "Plotting with matplotlib\nLet’s make a plot with the standard pyplot package:\n\n# https://matplotlib.org/3.5.3/api/_as_gen/matplotlib.pyplot.html\n\nimport matplotlib.pyplot as plt\n# set jupyter notebook figure size\nplt.rcParams['figure.figsize'] = [18, 12]\n\ncolors = {'Adelie':'blue', 'Gentoo':'orange', 'Chinstrap':'green'}\nplt.scatter(penguins.flipper_length_mm,\npenguins.body_mass_g, \nc= penguins.species.apply(lambda x: colors[x]))\nplt.xlabel('Flipper Length (cm)')\nplt.ylabel('Body Mass (g)')\n\nText(0, 0.5, 'Body Mass (g)')"
  },
  {
    "objectID": "posts/MESA/material/plotting.html#using-plotnine",
    "href": "posts/MESA/material/plotting.html#using-plotnine",
    "title": "Tutorial example: plotting with Python",
    "section": "Using plotnine",
    "text": "Using plotnine\n\n# conda install -c conda-forge plotnine \n# https://plotnine.readthedocs.io/en/stable/\n\nfrom plotnine import *\n\n# note the use of parentheses, because the syntax below (+) is non-standard in Python\np = (ggplot(penguins) +\n  geom_point(aes(x = 'flipper_length_mm',\n                  y = 'body_mass_g',\n                  color = 'species',\n                  shape = 'species')) +\n  xlab(\"Flipper Length (cm)\") +\n  ylab(\"Body Mass (g)\"))\n\np\n\n\n\n\n\n(p + facet_wrap('~species') + theme_bw(18) +  theme(figure_size = (12, 4)))\n\n\n\n\n\n(p + facet_grid('sex~species') + theme_linedraw(18) + theme(figure_size = (12, 8)))\n\n\n\n\n\np.save( \"figures/plotnine.png\",  dpi=200, width=8, height=5, units='in')\np.save( \"figures/plotnine.pdf\",  width=6.26, height=4, units='in')\n\n\n\np2 = (p + theme(legend_position='top', legend_direction='horizontal'))\np2\n\np2.save( \"figures/plotnine_1col.pdf\",  width=3,height=2,units='in')\n\n\n\np3 = (ggplot(penguins) +\n  geom_point(aes(x = 'flipper_length_mm',\n                  y = 'body_mass_g',\n                  color = 'species',\n                  shape = 'species'), size=4) +\n  scale_color_brewer(type='qual', palette=2) +\n  xlab(\"Flipper Length (cm)\") +\n  ylab(\"Body Mass (g)\") +\n  theme_grey(22))\n\np3.save( \"plotnine_big.svg\",  width=12,height=8,units='in')\n\np4 = (p3 + facet_grid( '~species') + theme(panel_spacing=0.2, legend_position='none'))\np4.save( \"plotnine_big2.svg\",  width=14,height=4,units='in')\np4 + theme(figure_size = (14,4))\n\n\n\n\n\n (ggplot(penguins) +\n  geom_boxplot(aes(x = 'factor(species)',\n                  y = 'body_mass_g',\n                  color = 'factor(species)')) +\n  scale_color_brewer(name='species', type='qual', palette=2) +\n  xlab(\"\") +\n  ylab(\"Body Mass (g)\") +\n  theme_grey(22))\n\n\n\n\n\n (ggplot(penguins) +\n  geom_violin(aes(x = 'factor(species)',\n                  y = 'body_mass_g',\n                  fill = 'factor(species)')) +\n  scale_fill_brewer(name='species', type='qual', palette=1) +\n  xlab(\"\") +\n  ylab(\"Body Mass (g)\") +\n  theme_grey(22))"
  },
  {
    "objectID": "posts/MESA/material/plotting.html#interactive-plotting-with-plotly",
    "href": "posts/MESA/material/plotting.html#interactive-plotting-with-plotly",
    "title": "Tutorial example: plotting with Python",
    "section": "Interactive plotting with plotly",
    "text": "Interactive plotting with plotly\n\n# https://plotly.com/python/getting-started/\n# conda install -c plotly plotly=5.14.1 \n# conda install -c conda-forge nbformat\nimport plotly.express as px\n\nfig = px.scatter(penguins,\n                 x=\"flipper_length_mm\",\n                 y=\"body_mass_g\",\n                 color= \"species\",\n                 symbol= \"species\",\n                 labels=dict(flipper_length_mm=\"Flipper Length\",\n                             body_mass_g=\"Body Mass\"),\n                 width=800, height=600)\nfig.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "posts/MESA/material/plotting.html#plotting-with-seaborn",
    "href": "posts/MESA/material/plotting.html#plotting-with-seaborn",
    "title": "Tutorial example: plotting with Python",
    "section": "Plotting with seaborn",
    "text": "Plotting with seaborn\n\n# https://seaborn.pydata.org/\n#  conda install -c anaconda seaborn \nimport seaborn as sns \n\n# Apply the default theme\nsns.set_theme()\n# sns.set_style('whitegrid')\n\np = sns.relplot(x = 'flipper_length_mm',\n            y ='body_mass_g',\n            hue = 'species',\n            style = 'species',\n            data = penguins, height=8, aspect=12/8)\np.set_xlabels('Flipper Length')\np.set_ylabels('Body Mass')"
  },
  {
    "objectID": "posts/MESA/material/plotting.html#plotting-with-altair",
    "href": "posts/MESA/material/plotting.html#plotting-with-altair",
    "title": "Tutorial example: plotting with Python",
    "section": "Plotting with altair",
    "text": "Plotting with altair\n\n#  conda install -c conda-forge altair\n# https://altair-viz.github.io/\nimport altair as alt\n\n\nchart = alt.Chart(penguins).mark_point().encode(\n    x = 'flipper_length_mm:Q',\n    y ='body_mass_g:Q',\n    color='species:N',\n).properties(width=800, height=600)\nchart\n\n\n\n\n\n\nThe x and y axes include 0 by default, which we can adjust by providing a scale. While we’re at it, let’s split the plot into different panels for illustration:\n\nchart = alt.Chart(penguins).mark_point().encode(\n    alt.X('flipper_length_mm:Q',\n        scale=alt.Scale(zero=False)\n    ),\n    alt.Y('body_mass_g:Q',\n        scale=alt.Scale(zero=False)\n    ),\n    color='species:N',\n    column=alt.Column('island', header=alt.Header(titleFontSize=18,labelFontSize=14)),\n).configure_axis(\n    labelFontSize=14,\n    titleFontSize=18,\n    \n).configure_title(fontSize=18).configure_legend(labelFontSize=14).properties(width=300,height=300)\n\nchart"
  },
  {
    "objectID": "posts/MESA/material/plotting.html#suggested-exercises",
    "href": "posts/MESA/material/plotting.html#suggested-exercises",
    "title": "Tutorial example: plotting with Python",
    "section": "Suggested exercises",
    "text": "Suggested exercises\n\nData input/output\nInstead of using a built-in dataset like in the examples above:\n\nTake a look at the 10 mins introduction to pandas; the dataframe format is very useful to mix numeric variables (as in a standard numpy matrix) together with other types (dates, categories, strings, etc.)\nCreate a synthetic dataset with 5 (or more) variables, at least one of which should be a categorical type (as in the penguin species, or islands above)\nExport these data into a CSV file on your computer, and re-import them as if this was a dataset provided to you in this format\n\n\n\nFaceted plots\nTry to create small multiples (facets, also called trellis) for the plots above, using one or two categories to facet by rows and/or columns.\n\n\nDifferent aesthetics\nTry mapping different aesthetics, such as:\n\nline type (solid, dashed, etc.)\npoint shape\npoint size\nline width, opacity, … see what is available\n\n\n\nDifferent plot types\nTry producing the following kinds of plots:\n\nA boxplot\nA violing plot\nA heatmap\n\n\n\nFine-tuning\nRead the documentation to figure out how to polish your plot, notably:\n\nchange the colour scheme/palette\nchange the theme (e.g. dark background, large font size for all the text)\nsuppress the legend\nrender LaTeX-like strings in the axis labels, e.g $\\alpha = \\int_0^\\infty \\beta(x)dx$\noptional: add interactive tooltips (in plotly)\n\n\n\nSaving plots\nCheck the options to save your graphic as\n\npng, with size 6x4 inches and resolution of 300dpi\npdf, with transparent background and size 6x4 inches\nsquare svg of size 4x4 inches"
  },
  {
    "objectID": "posts/latex/index.html",
    "href": "posts/latex/index.html",
    "title": "10 common misconceptions about LaTeX",
    "section": "",
    "text": "Next week (14th March), in addition to the regular helpdesk session, I’ll give a little teaser presentation (20mins) about the software LaTeX for document preparation, for those interested. Start at 12pm.\n\n\n\n10 common misconceptions about LaTeX\n\n\n(regular helpdesk drop-in session before and after)"
  },
  {
    "objectID": "posts/opening/index.html",
    "href": "posts/opening/index.html",
    "title": "First meeting",
    "section": "",
    "text": "Kia ora everyone\n\n\n\nAims of the helpdesk (pdf)\n\n\nWe’re launching a weekly Programming helpdesk for Physics students; it will take place on Tuesdays 11:30am–1:30pm in LB203 (Physics labs). All levels (100 to 400) are welcome – we’re hoping you’ll take the opportunity to help each other in groups, but we’ll also have some academics and grad students come along to help.\nTo get the ball rolling for the first session (Tuesday 7th March), there will be pizza and soft drinks at 12:15 pm.\nOnce a month, we’ll also organise a 20–30 minutes “teaser” presentation on some programming topics that you may wish to explore further*.\nThe Physics Team\n*: Tentative list of topics for 2023, in no particular order:\n\n10 common misconceptions about LaTeX\nR.I.P: On using R in Physics\nBibliography management with Zotero and Bibtex\nGrammar of Graphics\nComputational simulations with Julia\nReproducible analyses with Quarto\nInteractive apps with Shiny\nVersion control and collaboration with Github\nCreating a personal website in 10 minutes\n“glue” code"
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "Python resources",
    "section": "",
    "text": "vuw-scps.github.io/python-physics/: Collection of Jupyter notebooks from different courses across 100-300 Physics\npandas"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "helpdesk",
    "section": "",
    "text": "General announcements and updates for the weekly programming helpdesk. You can subscribe to the RSS feed for updates.\n\n\n\n\n\n\n\n\n  \n\n\n\n\nDemo: exploring a complex dataset\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTutorial example: plotting with Python\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nWorkshop on graphics\n\n\n\n\n\n\n\ngraphics\n\n\npostgrad\n\n\n\n\n\n\n\n\n\n\n\nAug 4, 2023\n\n\nbaptiste\n\n\n\n\n\n\n  \n\n\n\n\n10 common misconceptions about LaTeX\n\n\n\n\n\n\n\nannouncement\n\n\ngeneral\n\n\nlatex\n\n\n\n\n\n\n\n\n\n\n\nMar 7, 2023\n\n\nbaptiste\n\n\n\n\n\n\n  \n\n\n\n\nFirst meeting\n\n\n\n\n\n\n\nannouncement\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nMar 3, 2023\n\n\nbaptiste\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This is an unofficial website to share misc. resources relating to the weekly helpdesk. Please note that information available on these pages is provided as-is and not necessarily endorsed by the University.\nFor official information, head to the University’s website"
  },
  {
    "objectID": "R.html",
    "href": "R.html",
    "title": "R resources",
    "section": "",
    "text": "R for data science\nR for data science (2nd edition, in progress)\nHands-on programming with R\nAdvanced R, more for programmers"
  },
  {
    "objectID": "R.html#external-resources",
    "href": "R.html#external-resources",
    "title": "R resources",
    "section": "",
    "text": "R for data science\nR for data science (2nd edition, in progress)\nHands-on programming with R\nAdvanced R, more for programmers"
  }
]